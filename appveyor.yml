version: 1.5.18.{build}
shallow_clone: true


environment:
  # settings
  static_runtime: 1
  
  static_gcargs: -DCMAKE_SHARED_LINKER_FLAGS=-static
  static_vcargs:
  #static_vcargs: -DCMAKE_C_FLAGS_RELEASE=/MT
  # ^ don't.
  
  cmake_args: -DCMAKE_LIBRARY_PATH=zlib -DCMAKE_INCLUDE_PATH=zlib
  
  
  matrix:
    - build_platform: "x86"
      build_compiler: "msvc"
    
    - build_platform: "x64"
      build_compiler: "msvc"
    
    - build_platform: "x86"
      build_compiler: "mingw"
    
    - build_platform: "x64"
      build_compiler: "mingw"



install:
  - ps: if($env:build_platform -eq 'x64') {
          $env:vcvar_arg = 'x86_amd64';
          $env:vc_cm_arg = 'Visual Studio 12 Win64';
        }
        else {
          $env:vcvar_arg = 'x86';
          $env:vc_cm_arg = 'Visual Studio 12';
        }
  
  
  # get common functions
  - git clone https://github.com/imazen/gd-appveyor-helpers
  - ps: . .\gd-appveyor-helpers\appveyor_funcs.ps1
  
  # fetch deps
  - nuget install zlib-%build_compiler%-%build_platform%-master -Source https://ci.appveyor.com/nuget/zlib-94hmpf3q011d
  - move zlib* zlib
  - del zlib\*.dll*
  - ps: ls zlib\*_static.lib | % {move $_ ($_ -replace '_static', '') -force}
  
  # get mingw-w64 (C:\mingw64)
  - ps: if($env:build_compiler -eq 'mingw' -and $env:build_platform -eq 'x64') {
      invoke 'curl' '-L -o mw64.7z "http://libgd.blob.core.windows.net/mingw/x86_64-4.9.1-release-posix-seh-rt_v3-rev1.7z"';
      invoke '7z' 'x -oC:\ mw64.7z'; }
  
  # sh is breaking mingw builds; remove
  - for %%i in (sh.exe) do @del "%%~$PATH:i"



build_script:
  
  - ps: $nupkg_b = "libpng-$($env:build_compiler)-$($env:build_platform)-$($env:APPVEYOR_REPO_BRANCH)";
  - ps: $nupkg_c = "libpng-$($env:build_compiler)-$($env:build_platform)-$($env:APPVEYOR_REPO_COMMIT)";
  
  # build msvc
  
  - '"C:\Program Files (x86)\Microsoft Visual Studio 12.0\VC\vcvarsall" %vcvar_arg%'
  
  - SET zip=libpng-msvc12-%build_platform%.zip
  - SET cmake_cmd=cmake -G "%vc_cm_arg%" %cmake_args%
  - if [%static_runtime%]==[1] SET cmake_cmd=%cmake_cmd% %static_vcargs%
  
  - if [%build_compiler%]==[msvc] (
      %cmake_cmd% &&
      msbuild libpng.sln /p:Configuration=Release /v:m &&
      7z a %zip% .\Release\libpng.dll .\Release\libpng.lib .\Release\libpng_static.lib png.h pngconf.h pnglibconf.h &&
      appveyor PushArtifact %zip%
    )
  
  - ps: if(Test-Path $env:zip) {
          zip2nuget $env:zip $nupkg_b;
          zip2nuget $env:zip $nupkg_c; }
  
  
  
  # build mingw
  
  - if [%build_compiler%]==[mingw] if [%build_platform%]==[x86] SET PATH=C:\MinGW\bin;%PATH%
  - if [%build_compiler%]==[mingw] if [%build_platform%]==[x64] SET PATH=C:\mingw64\bin;%PATH%
  
  - SET zip=libpng-mingw-%build_platform%.zip
  - SET cmake_cmd=cmake -G "MinGW Makefiles" %cmake_args%
  - if [%static_runtime%]==[1] SET cmake_cmd=%cmake_cmd% %static_gcargs%
  
  - if [%build_compiler%]==[mingw] (
      %cmake_cmd% &&
      mingw32-make &&
      7z a %zip% libpng.a libpng.dll.a libpng.dll png.h pngconf.h pnglibconf.h &&
      appveyor PushArtifact %zip%
    )
  
  - ps: if(Test-Path $env:zip) {
          zip2nuget $env:zip $nupkg_b;
          zip2nuget $env:zip $nupkg_c; }



test_script:
  - SET fail=0
  - ctest -C Release || SET fail=1 & ver > nul
  - ps: Push-Ctest-Results '.'
  - ps: Push-AppveyorArtifact Testing\Temporary\LastTest.log
  - exit %fail%

on_success:
  - ps: Push-AppveyorArtifact "$nupkg_b*.nupkg"
  - ps: Push-AppveyorArtifact "$nupkg_c*.nupkg"
